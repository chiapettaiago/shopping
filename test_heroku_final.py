#!/usr/bin/env python3
"""
Teste final do sistema de cadastro para Heroku
"""

import os
import sys
from dotenv import load_dotenv

# Carregar vari√°veis do .env
load_dotenv()

def test_user_registration_flow():
    """Testa o fluxo completo de cadastro sem banco"""
    print("üß™ TESTE DE FLUXO DE CADASTRO")
    print("============================")
    
    # Simular dados de um formul√°rio de cadastro
    form_data = {
        'full_name': 'Jo√£o Silva',
        'email': 'joao@example.com',
        'username': 'joao_silva',
        'password': 'senha123456',
        'confirm_password': 'senha123456'
    }
    
    # Valida√ß√µes que acontecem na rota auth()
    validations = []
    
    # 1. Campos obrigat√≥rios
    if all([form_data['full_name'], form_data['email'], form_data['username'], 
            form_data['password'], form_data['confirm_password']]):
        validations.append("‚úÖ Todos os campos obrigat√≥rios preenchidos")
    else:
        validations.append("‚ùå Campos obrigat√≥rios faltando")
    
    # 2. Tamanho da senha
    if len(form_data['password']) >= 8:
        validations.append("‚úÖ Senha tem pelo menos 8 caracteres")
    else:
        validations.append("‚ùå Senha muito curta")
    
    # 3. Confirma√ß√£o de senha
    if form_data['password'] == form_data['confirm_password']:
        validations.append("‚úÖ Senhas conferem")
    else:
        validations.append("‚ùå Senhas n√£o conferem")
    
    # 4. Normaliza√ß√£o de dados
    email_normalized = form_data['email'].strip().lower()
    username_normalized = form_data['username'].strip()
    name_normalized = form_data['full_name'].strip()
    
    if email_normalized == 'joao@example.com':
        validations.append("‚úÖ Email normalizado corretamente")
    else:
        validations.append("‚ùå Erro na normaliza√ß√£o do email")
    
    # 5. Hash da senha
    try:
        from werkzeug.security import generate_password_hash, check_password_hash
        password_hash = generate_password_hash(form_data['password'])
        
        if check_password_hash(password_hash, form_data['password']):
            validations.append("‚úÖ Hash de senha funcionando")
        else:
            validations.append("‚ùå Erro no hash de senha")
    except ImportError:
        validations.append("‚ùå Werkzeug n√£o dispon√≠vel")
    
    # Mostrar resultados
    for validation in validations:
        print(validation)
    
    passed = sum(1 for v in validations if v.startswith("‚úÖ"))
    total = len(validations)
    
    return passed == total

def test_app_configuration():
    """Testa se a configura√ß√£o da aplica√ß√£o est√° correta"""
    print("\nüîß TESTE DE CONFIGURA√á√ÉO")
    print("========================")
    
    try:
        # Testar import sem conectar ao banco
        os.environ['DYNO'] = 'web.1'  # Simular Heroku
        
        from app import app
        
        checks = []
        
        # Verificar se √© reconhecido como Heroku
        if os.environ.get('DYNO'):
            checks.append("‚úÖ Detectado como ambiente Heroku")
        else:
            checks.append("‚ùå N√£o detectado como Heroku")
        
        # Verificar configura√ß√µes de pool
        pool_size = app.config.get('SQLALCHEMY_POOL_SIZE', 0)
        if pool_size <= 3:
            checks.append(f"‚úÖ Pool size otimizado para Heroku: {pool_size}")
        else:
            checks.append(f"‚ùå Pool size muito alto: {pool_size}")
        
        # Verificar timeout
        pool_timeout = app.config.get('SQLALCHEMY_POOL_TIMEOUT', 0)
        if pool_timeout <= 30:
            checks.append(f"‚úÖ Pool timeout adequado: {pool_timeout}s")
        else:
            checks.append(f"‚ö†Ô∏è Pool timeout alto: {pool_timeout}s")
        
        # Verificar se pre_ping est√° habilitado
        pre_ping = app.config.get('SQLALCHEMY_POOL_PRE_PING', False)
        if pre_ping:
            checks.append("‚úÖ Pool pre-ping habilitado")
        else:
            checks.append("‚ùå Pool pre-ping desabilitado")
        
        for check in checks:
            print(check)
        
        return all(check.startswith("‚úÖ") for check in checks)
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False
    finally:
        # Limpar vari√°vel de ambiente
        if 'DYNO' in os.environ:
            del os.environ['DYNO']

def main():
    print("üéØ TESTE FINAL PARA HEROKU")
    print("=" * 40)
    
    tests = [
        ("Fluxo de cadastro", test_user_registration_flow),
        ("Configura√ß√£o da aplica√ß√£o", test_app_configuration),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        result = test_func()
        results.append(result)
    
    print("\n" + "=" * 40)
    print("üìä RESULTADO FINAL")
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print("‚úÖ Todos os testes passaram!")
        print("üöÄ Aplica√ß√£o pronta para Heroku!")
        print("\nüí° Pr√≥ximos passos:")
        print("1. ./deploy_heroku.sh  # Deploy autom√°tico")
        print("2. Ou siga o HEROKU_DEPLOY.md manualmente")
        return 0
    else:
        print(f"‚ùå {total - passed} testes falharam")
        print("üîß Corrija os problemas antes do deploy")
        return 1

if __name__ == "__main__":
    sys.exit(main())